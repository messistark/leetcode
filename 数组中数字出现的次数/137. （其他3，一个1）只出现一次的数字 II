给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,3,2]
输出: 3
示例 2:

输入: [0,1,0,1,0,1,99]
输出: 99

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/single-number-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//统计每位1的个数，如果不为3的倍数，则说明出现一次的数在该位为1
class Solution {
    public int singleNumber(int[] nums) {
        int res = 0;
        for(int i =0; i< 32; i++){
            //左移i位
            int mask = 1 << i;
            int count = 0;
            for(int j =0; j<nums.length; j++){
                int temp = nums[j] & mask;
                if(temp >>> i == 1) //一定是带符号右移。因为最高位是符号位，当计算i = 31时，不带符号右移高位补1，最后不会等于1，而是1111。。。。。1111.
                    count++;
            }
            
            if(count % 3 == 1)
                res  = res | 1 << i;
        }
        return res;

    }
}
