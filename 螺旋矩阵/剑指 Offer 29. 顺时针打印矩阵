输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。

 

示例 1：

输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]
示例 2：

输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



class Solution {
    public int[] spiralOrder(int[][] matrix) {
        if(matrix.length==0)
            return new int[0];
        int top = 0;
        int buttom = matrix.length-1;
        int left = 0;
        int right = matrix[0].length-1;
        int[] res = new int[matrix.length * matrix[0].length];
        int index = 0;
        while(top <= buttom && right>=left){
            for(int i = left; i<=right; i++){
                // System.out.print(top + " " + buttom + " " + left + " " +right);
                res[index] = matrix[top][i];
                index++;
            }
            for(int i = top+1; i<=buttom; i++){
                res[index] = matrix[i][right];
                index++;
            }
            //需要判断，以免重复打印
            if(buttom!=top){
                for(int i = right-1; i>=left; i--){
                res[index] = matrix[buttom][i];
                index++;
                }
            }
            //需要判断，以免重复打印
            if(left!=right){
                for(int i = buttom-1; i>=top+1; i--){
                res[index] = matrix[i][left];
                index++;
                }
            }
        
            top++;
            buttom--;
            right--;
            left++;

        }
        return res;
    }
}
