给定整数数组 A，每次 move 操作将会选择任意 A[i]，并将其递增 1。

返回使 A 中的每个值都是唯一的最少操作次数。

示例 1:

输入：[1,2,2]
输出：1
解释：经过一次 move 操作，数组将变为 [1, 2, 3]。
示例 2:

输入：[3,2,1,2,1,7]
输出：6
解释：经过 6 次 move 操作，数组将变为 [3, 4, 1, 2, 5, 7]。
可以看出 5 次或 5 次以下的 move 操作是不能让数组的每个值唯一的。



class Solution {
    /**
        无论先加哪个，最少操作次数肯定相等

        a1 , a2 , a3为数组中最小的空缺值
        此时数据重复部分为1 1 1 2 2 
        无论是 1 增加到 a1 还是 2 增加到a1 , 其实无影响的
        因为a1 + a2 + a3 - (1 + 1 + 2)
    */
    public int minIncrementForUnique(int[] A) {
       
         //贪心，尽量增加到最近，但是未出现的数上
        //直接在res上加减（重复的为减， 未出现的为加）
        int res = 0;
        //当前有多少个重复的数待处理
        int count = 0;

        //用数组代替hashmap
        int[] nums = new int[80001];
        for(int i = 0; i<A.length; i++)
            nums[A[i]]++;
        for(int i = 0; i<=80000; i++){
            //该数字重复
            if(nums[i] >= 2){
                count += nums[i] - 1;
                res -= i * (nums[i] - 1);
            }else if(nums[i] == 0 && count > 0){
                count--;
                res+=i;
                nums[i] = 1;
            }
        }

        return res;
    }
}
