给定一组 N 人（编号为 1, 2, ..., N）， 我们想把每个人分进任意大小的两组。

每个人都可能不喜欢其他人，那么他们不应该属于同一组。

形式上，如果 dislikes[i] = [a, b]，表示不允许将编号为 a 和 b 的人归入同一组。

当可以用这种方法将每个人分进两组时，返回 true；否则返回 false。

 

示例 1：

输入：N = 4, dislikes = [[1,2],[1,3],[2,4]]
输出：true
解释：group1 [1,4], group2 [2,3]
示例 2：

输入：N = 3, dislikes = [[1,2],[1,3],[2,3]]
输出：false
示例 3：

输入：N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
输出：false


//也可以按照节点顺序依次涂色
class Solution {
    int[][] map = null;
    int[] color = null;
    public boolean possibleBipartition(int N, int[][] dislikes) {
        //邻接矩阵存储
        map = new int[N+1][N+1];
        for(int[] dislike : dislikes){
            map[dislike[0]][dislike[1]] = 1;
            map[dislike[1]][dislike[0]] = 1;
        }

        color = new int[N+1];
        
        //对未着色节点进行
        for(int i = 1; i<=N; i++)
            if(color[i]==0 && !dfs(i, 1, N))
                return false;
        return true;
    }

    boolean dfs(int index, int expColor, int N){
        //着色
        color[index] = expColor;
        for(int i =1; i<=N; i++){
            if(map[index][i] == 1 && color[i]==0){
                if(!dfs(i, expColor * -1, N))
                    return false;
            //如果相邻节点的颜色与当前节点相同，则返回错误
            }else if(map[index][i] == 1 && color[i]==expColor)
                return false;
        }
        return true;
    }
}
