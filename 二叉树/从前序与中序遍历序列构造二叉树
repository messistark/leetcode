根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int index = 0;
    int[] pre = null;
    int[] in = null;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        pre = preorder;
        in = inorder;
        return Solution(0, preorder.length - 1);
    }
    public TreeNode Solution(int left, int right){
    
        if(left > right)
            return null;

        TreeNode node = new TreeNode(pre[index]);
        int index_in = left;
        for(int i = left; i<=right; i++){
            if(in[i] == pre[index]){
                index_in = i;
                break;
            }
        }
        index++;

        node.left = Solution(left, index_in - 1);
        node.right = Solution(index_in + 1, right);

        return node;

    }
}
