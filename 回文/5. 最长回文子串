给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-palindromic-substring
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//遍历法
class Solution {
    public String longestPalindrome(String s) {
        int maxl = 0;
        String maxString = "";
        for(int i = 0; i<=s.length()-1; i++){
            int left = i-1;
            int right = i+1;
            //单个节点为中心的遍历
            while(left>=0 && right<=s.length()-1){
                if(s.charAt(left) != s.charAt(right))
                    break;
                left--;
                right++;
            }
            if((right - left -1)>maxl) {
                maxl = right - left -1;
                maxString = s.substring(left + 1, right);
            }
            //双节点为中心遍历
            if(i<s.length()-1 && s.charAt(i)==s.charAt(i+1)){
                int left2 = i-1;
                int right2 = i+2;
                while(left2>=0 && right2<=s.length()-1){
                    if(s.charAt(left2) != s.charAt(right2))
                        break;
                    left2--;
                    right2++;
                }
                if((right2 - left2 -1)>maxl) {
                    maxl = right2 - left2 - 1;
                    maxString = s.substring(left2 + 1, right2);
                }
            }
        }
        return maxString;
    }
    
}


//动态规划，从长度为1 2 3.。 n的次序依次遍历
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n));
        string ans;
        for (int l = 0; l < n; ++l) {
            for (int i = 0; i + l < n; ++i) {
                int j = i + l;
                if (l == 0) {
                    dp[i][j] = 1;
                }
                else if (l == 1) {
                    dp[i][j] = (s[i] == s[j]);
                }
                else {
                    dp[i][j] = (s[i] == s[j] && dp[i + 1][j - 1]);
                }
                if (dp[i][j] && l + 1 > ans.size()) {
                    ans = s.substr(i, l + 1);
                }
            }
        }
        return ans;
    }
};

