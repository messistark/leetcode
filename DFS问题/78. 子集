class Solution {
   public List<List<Integer>> subsets(int[] nums) {
        return digui(nums, 0);

    }

    public List<List<Integer>> digui (int[] nums, int start) {
        //如果是最后一个，则添加 最后一个 以及 空
        if(start == nums.length - 1 ){
            List<List<Integer>> result = new ArrayList<>();
            List<Integer> a = new ArrayList<>();
            a.add(nums[start]);
            List<Integer> b = new ArrayList<>();
            result.add(a);
            result.add(b);
            return result;
        }

        List<List<Integer>> Child = digui(nums, start+1);
        List<List<Integer>> t =  new ArrayList<>();
        //遍历后面生成的所有子集
        //既保留后面生成的子集， 也需要把所有的子集加上当前元素
        for(List<Integer> temp : Child){

            List<Integer> tempb = new ArrayList<>();
            tempb.addAll(temp);
            
            temp.add(nums[start]);
            t.add(tempb);
        }
        Child.addAll(t);
        return Child;
    }
}




class Solution {
  List<List<Integer>> output = new ArrayList();
  int n, k;

  public void backtrack(int first, ArrayList<Integer> curr, int[] nums) {
    // if the combination is done
    if (curr.size() == k)
      output.add(new ArrayList(curr));
     //遍历并以此选择first 到 n 之间的数 加入到当前集合
     //该层每个数依次遍历
    for (int i = first; i < n; ++i) {
      // add i into the current combination
      curr.add(nums[i]);
      // use next integers to complete the combination
      backtrack(i + 1, curr, nums);
      // backtrack
      curr.remove(curr.size() - 1);
    }
  }

  public List<List<Integer>> subsets(int[] nums) {
    n = nums.length;
    //遍历所有子集长度
    for (k = 0; k < n + 1; ++k) {
      backtrack(0, new ArrayList<Integer>(), nums);
    }
    return output;
  }
}


