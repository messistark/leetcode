给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

 

示例 1:

输入:
[
['1','1','1','1','0'],
['1','1','0','1','0'],
['1','1','0','0','0'],
['0','0','0','0','0']
]
输出: 1
示例 2:

输入:
[
['1','1','0','0','0'],
['1','1','0','0','0'],
['0','0','1','0','0'],
['0','0','0','1','1']
]
输出: 3
解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-islands
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//dfs和bfs
class Solution {
    public int numIslands(char[][] grid) {
        int result = 0;
        int m = grid.length;
        if(m == 0)
            return 0;
        int n = grid[0].length;
        for(int i = 0; i<m; i++){
            for(int j = 0; j< n; j++){
                //  if(grid[i][j]=='1'){
                //      dfs(grid, i, j, m, n);
                //      result++;
                //  }   
                if(grid[i][j] == '1'){
                    Queue<Integer> queue = new LinkedList<>();
                    result++;
                    grid[i][j] = '0';
                    queue.offer(i * n + j);
                    while(!queue.isEmpty()){
                        Integer t = queue.poll();
                        int a = t / n;
                        int b = t % n;
                        if(a > 0 && grid[a-1][b] == '1'){
                            grid[a-1][b] = '0';
                            queue.offer((a-1) * n + b);
                        }
                        if(b > 0 && grid[a][b-1] =='1'){
                            grid[a][b-1] = '0';
                            queue.offer((a) * n + b -1);
                        }
                           
                        if(b < n-1 && grid[a][b+1] == '1'){
                            grid[a][b+1] = '0';
                            queue.offer(a * n + b +1);
                        }
                            
                        if(a < m-1 && grid[a+1][b] =='1'){
                            grid[a+1][b] = '0';
                            queue.offer((a+1) * n + b);
                        }
                            
                    }                    
                }
            }
        }
        return result;
    }

    public void dfs(char[][] grid, int i, int j, int m, int n){
        grid[i][j] = '0';
        if(i > 0 && grid[i-1][j] == '1')
            dfs(grid, i-1, j, m, n);
        if(j > 0 && grid[i][j-1] =='1')
            dfs(grid, i, j-1, m, n);
        if(j < n-1 && grid[i][j+1] == '1')
            dfs(grid, i, j+1, m, n);
        if(i < m-1 && grid[i+1][j] =='1')
            dfs(grid, i+1, j, m, n);    
    }
}
