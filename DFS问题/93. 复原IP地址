给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。

有效的 IP 地址正好由四个整数（每个整数位于 0 到 255 之间组成），整数之间用 '.' 分隔。

 

示例:

输入: "25525511135"
输出: ["255.255.11.135", "255.255.111.35"]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/restore-ip-addresses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



class Solution {
    List<String> res;
    public List<String> restoreIpAddresses(String s) {
        res = new LinkedList<>();
        helper(s, new LinkedList<String>(), 0, 0);
        return res;
    }

    public void helper(String s, List<String> path, int index, int level){
        if(level == 3){
            //
            if(s.charAt(index) == '0' && Integer.valueOf(s.substring(index, s.length()))!=0)
                return;
            else if(s.charAt(index) == '0' && Integer.valueOf(s.substring(index, s.length()))==0 && (s.length()-1)>index)
                return;
            else if((s.length() - index)<=3 && Integer.valueOf(s.substring(index, s.length()))<=255){
                StringBuilder sb = new StringBuilder();
                for(int i = 0; i<=2; i++){
                    sb.append(path.get(i));
                    sb.append(".");
                }
                sb.append(s.substring(index, s.length()));
                res.add(sb.toString());
                return;
            }else{
                return;
            }
        }
        for(int i = index;i<index+3&&(i+1)<s.length();i++){
            //不允许001， 允许000
            if(s.charAt(index) == '0' && Integer.valueOf(s.substring(index, i+1))!=0)
                continue;
            //单个0才行
            else if(s.charAt(index) == '0' && Integer.valueOf(s.substring(index, i+1))==0 && i>index)
                continue;
            else if(index!=s.length()){
                //不能大于255
                if(i==index+2&&Integer.valueOf(s.substring(index, index+3))>255)
                    continue;
                else{
                    path.add(s.substring(index, i+1));
                    helper(s, path, i+1, level+1);
                    path.remove(path.size()-1);
                }
            }
        }
    }
}
