
反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。

说明:
1 ≤ m ≤ n ≤ 链表长度。

示例:

输入: 1->2->3->4->5->NULL, m = 2, n = 4
输出: 1->4->3->2->5->NULL


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //记录需要的四个节点位置
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        int count = 1;

        ListNode left = null;
        ListNode first = head;
        //找到开始反转节点和前驱节点，并记录
        while(count < m && first!=null){
            left = first;
            first = first.next;
            count++;
        }

        int count2 = 0;
        ListNode cur = first;
        ListNode prev = null;
        ListNode temp =null;
        //从first开始反转，最后prev是反转后头节点，cur是需要反转链表的后一个节点
        while(count2 <= n - m && cur!=null){
            temp = cur.next;
            cur.next = prev;
            prev = cur;
            cur = temp;
            count2++;
        }
        
        first.next = cur;
        if(left!=null)
            left.next = prev;
        else
            head = prev;

        return head;
    }
}
