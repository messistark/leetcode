给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目。

 

示例：

输入：A = [4,5,0,-2,-3,1], K = 5
输出：7
解释：
有 7 个子数组满足其元素之和可被 K = 5 整除：
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/subarray-sums-divisible-by-k
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
    public int subarraysDivByK(int[] A, int K) {
        Map<Integer, Integer> map = new HashMap<>();
        int pre = 0;
        int res = 0;
        map.put(0, 1);
        for(int i = 0; i<A.length; i++){
            int cur = pre + A[i];
            //考虑负数情况，负数也成立。
            int temp = (cur % K + K) % K;

            int count = 0;
            //看当前是否有modK后相同的值（如 14 9 4 ，14 -9 =5，因为mod4 加上5的倍数）
            if(map.keySet().contains(temp))
                count = map.get(temp);
            
            res+=count;
            if(map.keySet().contains(temp))
                map.put(temp, ++count);
            else
                map.put(temp, 1);
            pre = cur;
  
        }
        return res;
    }
}
