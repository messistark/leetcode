给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 'a'，'e'，'i'，'o'，'u' ，在子字符串中都恰好出现了偶数次。
示例 1：

输入：s = "eleetminicoworoep"
输出：13
解释：最长子字符串是 "leetminicowor" ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。
示例 2：

输入：s = "leetcodeisgreat"
输出：5
解释：最长子字符串是 "leetc" ，其中包含 2 个 e 。
示例 3：

输入：s = "bcbcbc"
输出：6
解释：这个示例中，字符串 "bcbcbc" 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 0 次。


//参考1248
class Solution {
    public int findTheLongestSubstring(String s) {
        int prestate = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 0);
        int res = 0;
        char[] c = s.toCharArray();
        for(int i = 1; i<=c.length; i++){
            //根据前一个的前缀和以及当前字符，计算当前状态
            int state = 0;
            if(c[i-1] == 'a')
                state = (prestate ^ (1 << 4));
            else if(c[i-1] == 'e')
                state = (prestate ^ (1 << 3));
            else if(c[i-1] == 'i')
                state = (prestate ^ (1 << 2));
            else if(c[i-1] == 'o')
                state = (prestate ^ (1 << 1));
            else if(c[i-1] == 'u')
                state = (prestate ^ 1);
            else
                state = prestate;
            
            //System.out.println(state);
            //查看所有前缀和中是否有状态相等的（奇减奇 为 偶， 偶见偶为偶）。
            //map中只记录每种状态的最左开始位置（因为求最大值）
            if(map.keySet().contains(state))
                res = Math.max(res, i - map.get(state));
            //将当前state设置为下一个prestate
            prestate = state;
            //只记录该状态的最左开始位置
            if(!map.keySet().contains(state))
                map.put(state, i);
        }
        return res;
    }
}
