421. 数组中两个数的最大异或值
给定一个非空数组，数组中元素为 a0, a1, a2, … , an-1，其中 0 ≤ ai < 231 。

找到 ai 和aj 最大的异或 (XOR) 运算结果，其中0 ≤ i,  j < n 。

你能在O(n)的时间解决这个问题吗？

示例:

输入: [3, 10, 5, 25, 2, 8]

输出: 28

解释: 最大的结果是 5 ^ 25 = 28.


class Solution {
    class TrieNode {
        HashMap<Character, TrieNode> children = new HashMap<Character, TrieNode>();
        public TrieNode() {}
    }
    public int findMaximumXOR(int[] nums) {
        int Max = -1;
        for(int i = 0; i<nums.length; i++){
            Max = Math.max(nums[i], Max);
        }
        int L = Integer.toBinaryString(Max).length();
        
        TrieNode root = getTrieNode(nums, L);
        int max = -1;
        for(int n: nums){
            TrieNode cur = root;
            int i = 0;
            int path = 0;
            int bitmask = 1 << L;
            //关键点： 字符串前面补充0！！！！！！！！
            String num = Integer.toBinaryString(n | bitmask).substring(1);
            
            for(Character c : num.toCharArray()){
                path = path << 1;
                if(c == '1'){
                    if(cur.children.keySet().contains('0')){
                        cur = cur.children.get('0');
                    }else{
                        cur = cur.children.get('1');
                        path += 1;
                    }
                }else{
                    if(cur.children.keySet().contains('1')){
                        cur = cur.children.get('1');
                        path += 1;
                    }else
                        cur = cur.children.get('0');
                }
            }
            max = Math.max((path ^ n), max);  
        }
        return max;

    }

    TrieNode getTrieNode(int[] nums, int L){
        TrieNode root = new TrieNode();
            
        for(int i = 0; i<nums.length; i++){
            int bitmask = 1 << L;
            String s = Integer.toBinaryString(nums[i] | bitmask).substring(1);
            TrieNode cur = root;
            for(Character c : s.toCharArray()){
                if(cur.children.keySet().contains(c))
                    cur = cur.children.get(c);
                else{
                    TrieNode newnode = new TrieNode();
                    cur.children.put(c, newnode);
                    cur = newnode;
                }
            }
        }
        return root;
    }
}
