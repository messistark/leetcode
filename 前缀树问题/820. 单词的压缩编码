820. 单词的压缩编码
给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。

例如，如果这个列表是 ["time", "me", "bell"]，我们就可以将其表示为 S = "time#bell#" 和 indexes = [0, 2, 5]。

对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 "#" 结束，来恢复我们之前的单词列表。

那么成功对给定单词列表进行编码的最小字符串长度是多少呢？

 

示例：

输入: words = ["time", "me", "bell"]
输出: 10
说明: S = "time#bell#" ， indexes = [0, 2, 5] 。

//从后往前构建前缀树最佳
class Solution {
    public class TrieNode{
        Map<Character, TrieNode> children = new HashMap<>();
        
    }
    int res = 0;
    public int minimumLengthEncoding(String[] words) {
        TrieNode root = build(words);
        helper(root, 0);
        return res;

    }
    
    public void helper(TrieNode root, int path){
        if(root.children.size() == 0){
            res += path+1;
            return;
        }

        for (Character c : root.children.keySet()) {
            helper(root.children.get(c), path+1);
        }

    }


    public TrieNode build(String[] words){
        TrieNode root = new TrieNode();

        for(String word : words){
            TrieNode cur = root;
            char[] cc = word.toCharArray();
            for(int i = cc.length-1 ; i>=0; i--){
                if(cur.children.keySet().contains(cc[i]))
                    cur = cur.children.get(cc[i]);
                else{
                    TrieNode temp = new TrieNode();
                    cur.children.put(cc[i], temp);
                    cur = temp;
                }
            }
        }
        return root;
    }
}

