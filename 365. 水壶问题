有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？

如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。

你允许：

装满任意一个水壶
清空任意一个水壶
从一个水壶向另外一个水壶倒水，直到装满或者倒空
示例 1: (From the famous "Die Hard" example)

输入: x = 3, y = 5, z = 4
输出: True
示例 2:

输入: x = 2, y = 6, z = 5
输出: False

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/water-and-jug-problem
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//模拟可能的转移操作，设计状态进行状态转移
class Solution {
    public class State {
        public int x;
        public int y;

        public State(int x, int y){
            this.x = x;
            this.y = y;
        }

        @Override
        public boolean equals(Object o) {
            State state = (State) o;
            return x == state.x && y == state.y;
        }

         @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }
    }

    public boolean canMeasureWater(int x, int y, int z) {
        //层次遍历
        Queue<State> queue = new LinkedList<>();
        Set<State> visited = new HashSet<>();

        State start = new State(0, 0);
        queue.offer(start);

        boolean res = false;
        while(!queue.isEmpty()){
            State state = queue.poll();
            //System.out.println(state.x + " " + state.y);
            if(visited.contains(state))
                continue;
            visited.add(state);
            if(state.x + state.y == z || state.x==z || state.y == z){
                res = true;
                break;
            }

            //x -> y , x可以倒完
            if(state.x >0 && state.x <= (y - state.y)){
                State next = new State(0, state.y + state.x);
                queue.offer(next);
            }
            //x -> y , y满了
            if(state.x >0 && state.x > (y - state.y)){
                State next = new State(state.x-(y - state.y), y);
                queue.offer(next);
            }
            //y -> x , y可以倒完
            if(state.y >0 && state.y <= (x - state.x)){
                State next = new State(state.x + state.y, 0);
                queue.offer(next);
            }
            //y -> x , x满了
            if(state.y >0 && state.y > (x - state.x)){
                State next = new State(x, state.y-(x - state.x));
                queue.offer(next);
            }
            //x倒完
            if(state.x > 0){
                State next = new State(0, state.y);
                queue.offer(next);
            }
            //x倒满
            if(state.x < x){
                State next = new State(x, state.y);
                queue.offer(next);
            }
            //y倒完
            if(state.y > 0){
                State next = new State(state.x, 0);
                queue.offer(next);
            }
            //y倒满
            if(state.y < y){
                State next = new State(state.x, y);
                queue.offer(next);
            }
                
        }
        return res;
    }
}
