假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 O(log n) 级别。

示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4
示例 2:

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-in-rotated-sorted-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
    public int search(int[] nums, int target) {
        return partition(nums, target, 0, nums.length-1);
    }
    //根据有序的那个部分确定我们该如何改变二分搜索的上下界，因为我们能够根据有序的那部分判断出 target 在不在这个部分
    public int partition(int[] nums, int target, int s, int e){
        if(s>e)
            return -1;
        int temp = (s + e)/2;
        if(nums[temp] == target)
            return temp;
        if(nums[temp]<nums[e])
            if(target>nums[temp] && target<=nums[e])
                return partition(nums, target, temp+1, e);
            else
                return partition(nums, target, s, temp-1);
        else
            if(target<nums[temp] && target>=nums[s])
                return partition(nums, target, s, temp-1);
            else
                return partition(nums, target, temp+1, e);
    }
}
