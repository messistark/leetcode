给你一个整数数组 arr 和一个目标值 target ，请你返回一个整数 value ，使得将数组中所有大于 value 的值变成 value 后，数组的和最接近  target （最接近表示两者之差的绝对值最小）。

如果有多种使得和最接近 target 的方案，请你返回这些整数中的最小值。

请注意，答案不一定是 arr 中的数字。

 

示例 1：

输入：arr = [4,9,3], target = 10
输出：3
解释：当选择 value 为 3 时，数组会变成 [3, 3, 3]，和为 9 ，这是最接近 target 的方案。
示例 2：

输入：arr = [2,3,5], target = 10
输出：5
示例 3：

输入：arr = [60864,25176,27249,21296,20204], target = 56803
输出：11361

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



class Solution {
    public int findBestValue(int[] arr, int target) {
        Arrays.sort(arr);
        int res = 0;
        int min = Integer.MAX_VALUE;

        //计算前缀和
        int[] presums = new int[arr.length];
        presums[0] = arr[0];
        for(int i = 1; i<arr.length; i++)
            presums[i] =  presums[i-1] + arr[i];

        //遍历到arr[arr.length-1]，后面大小都一样的
        for(int i = 0; i<=arr[arr.length-1]; i++){
            int cur = 0;
            //如果小于最小值，则直接可以运算
            if(i<=arr[0])
                cur = i*arr.length - target;
            else{
                //找到第一个大于等于i的值的下标
                int index = find(arr, i, 0, arr.length-1);
                //计算i-1之前的和
                int presum = 0;
                if(index>0){
                    presum = presums[index-1];
                }
                cur = presum + (arr.length-index)*i - target;
            }
            //计算最小值
            if(Math.abs(cur)<min){
                res = i;
                min = Math.abs(cur);
            }
            
        }
        return res;
    }
    public int find(int[] arr, int t, int l, int r){
        if(l>r)
            return -1;
        if(l==r)
            return l;
        int mid = (l + r)/2;
        if(arr[mid]>=t)
            return find(arr, t, l, mid);
        else
            return find(arr, t, mid+1, r);         
    }
}
