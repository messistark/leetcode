给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。

注意:

num 的长度小于 10002 且 ≥ k。
num 不会包含任何前导零。
示例 1 :

输入: num = "1432219", k = 3
输出: "1219"
解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。
示例 2 :

输入: num = "10200", k = 1
输出: "200"
解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。
示例 3 :

输入: num = "10", k = 2
输出: "0"
解释: 从原数字移除所有的数字，剩余为空就是0。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-k-digits
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
    //优先选择高位删除。高位用数值小的低位补上
    //比较相邻两数，选择删除大的。(1 54 678， 例如54， 左边1 右边678 都相同。这时选择删5那么会最小)
    //但是删除相邻两数右边的数时， 可能该数右边还有更大的，形成上升序列（1234567，这时删7最好）。那么上升序要删除序列中最右元素。
    //所以右边数展示不删,继续使用栈存储，直到找到上升序列最右元素删除。
    //只删除左边的元素
    public String removeKdigits(String num, int k) {
       


        //另一种想法是优先选择高位删除。
        //删除升序中最后一个（一个数也是升序，若升序只有一个数，则直接删除）
        if(num.length() == k)
            return "0";
        StringBuilder sb = new StringBuilder(num);

        while(k !=0){
            int ind = 0;
            for(int i = 1; i< sb.length(); i++){
                if(sb.charAt(i) < sb.charAt(i-1))
                    break;
                ind = i;
            }
 
            sb.delete(ind ,ind+1);
            //最高位为0且后面还有值，需要删除最高位0
            while(sb.length()>0 && sb.charAt(0) == '0')
                sb.delete(0 ,1);
            k--;
        }

        if(sb.toString().equals(""))
            return "0";
        return sb.toString();

        




    }
}
