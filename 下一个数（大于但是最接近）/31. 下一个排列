实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/next-permutation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
    public void nextPermutation(int[] nums) {
        int i;
        for(i = nums.length - 1; i>0; i--){
            //找到3  35421
            if(nums[i] > nums[i-1]){
                int t = i -1;
                //找到4 交换
                while(t + 1< nums.length && nums[t + 1] > nums[i-1]){
                    t++;
                }
                int temp = nums[t];
                nums[t] = nums[i-1];
                nums[i-1] = temp;
                break;
            }

        }
        // 排序，保证最接近
        Arrays.sort(nums, i,  nums.length);
    }
}
