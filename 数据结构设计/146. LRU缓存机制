运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。

获取数据 get(key) - 如果关键字 (key) 存在于缓存中，则获取关键字的值（总是正数），否则返回 -1。
写入数据 put(key, value) - 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字/值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。

 

进阶:

你是否可以在 O(1) 时间复杂度内完成这两种操作？

 

示例:

LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回  1
cache.put(3, 3);    // 该操作会使得关键字 2 作废
cache.get(2);       // 返回 -1 (未找到)
cache.put(4, 4);    // 该操作会使得关键字 1 作废
cache.get(1);       // 返回 -1 (未找到)
cache.get(3);       // 返回  3
cache.get(4);       // 返回  4


//map 的value存储链表节点
//双向链表。链表节点值为 关键字的值。（双向链表快速插入删除）
class LRUCache {

        public Link link;
        public java.util.HashMap<Integer, LinkNode> hashMap;
        public int capacity;
        public int count;
        public LRUCache(int capacity) {
            link = new Link();
            hashMap = new java.util.HashMap();
            this.capacity = capacity;
            count = 0;
        }

        public int get(int key) {
            LinkNode result = hashMap.get(key);
            if(result == null)
                return -1;
            else{
                link.delete(result);
                link.add(result);
                return result.value;
            }

        }

        public void put(int key, int value) {
              if(hashMap.get(key)==null) {
                  if(count < capacity) {
                        LinkNode temp = new LinkNode(key, value);
                        hashMap.put(key, temp);
                        link.add(temp);
                        count++;
                  }else{
                        LinkNode last = link.end.pre;
                        int keytemp = last.key;
                        link.delete(last);
                        hashMap.remove(keytemp);
                        LinkNode temp = new LinkNode(key, value);
                        hashMap.put(key, temp);
                        link.add(temp);
                    }
                }else{
                    link.delete(hashMap.get(key));
                    hashMap.remove(key);
                    LinkNode temp = new LinkNode(key, value);
                    link.add(temp);
                    hashMap.put(key, temp);
                }
        }



    class LinkNode{
        public int key;
        public int value;
        public LinkNode next;
        public LinkNode pre;
        public LinkNode(){};
        public LinkNode(int key, int value){
            this.key = key;
            this.value = value;
        }
    }

    class Link{
        public LinkNode start;
        public LinkNode end;
        public Link(){
            this.start = new LinkNode();
            this.end = new LinkNode();
            this.start.next = this.end;
            this.end.pre = this.start;
        }

        public void add(LinkNode node){
            LinkNode temp = this.start.next;
            this.start.next = node;
            node.pre = this.start;
            node.next = temp;
            temp.pre = node;
        }

        public void delete(LinkNode node){
            LinkNode pre = node.pre;
            LinkNode next = node.next;
            pre.next = next;
            next.pre = pre;
        }
    }
}
