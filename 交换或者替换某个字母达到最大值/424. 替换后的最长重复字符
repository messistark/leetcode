给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 k 次。在执行上述操作后，找到包含重复字母的最长子串的长度。

注意:
字符串长度 和 k 不会超过 104。

示例 1:

输入:
s = "ABAB", k = 2

输出:
4

解释:
用两个'A'替换为两个'B',反之亦然。
示例 2:

输入:
s = "AABABBA", k = 1

输出:
4


class Solution {
    //如果 窗口长度 - 当前窗口中的出现次数最多的字母个数 小于等于k，那么这个窗口就是满足条件的
    public int characterReplacement(String s, int k) {
        char[] c = s.toCharArray();
        int left =0;
        int right =0;
        int[] count = new int[26];
        int maxCountWin = 0;

        int res = 0;
        for(right = 0; right<c.length; right++){
            //处理新加入的字符，看看是否更新最大字符数量
            count[c[right] - 'A']++;
            maxCountWin = Math.max(maxCountWin, count[c[right] - 'A']);
            
            //如果不满足可替换条件
            if((right-left + 1 - maxCountWin) > k){
                count[c[left] - 'A']--;
                left++;
            }else{//满足可替换条件
                res = Math.max(res, right-left + 1);
            }
        }

        return res;
    }


}
