给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

 

示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
    public int translateNum(int num) {
        //num 转换为String再转换为char数组
        String s = String.valueOf(num);
        char[] nums = s.toCharArray();
        int[] dp = new int[nums.length+1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i = 1; i<nums.length; i++){
            int temp = 0;
            if(nums[i-1]=='1' ||(nums[i-1]=='2' && nums[i]<='5'))
                temp = dp[i-1];
            dp[i+1] = dp[i] + temp;
        }
        return dp[nums.length];
    }
}
