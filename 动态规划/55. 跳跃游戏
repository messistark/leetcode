55. 跳跃游戏
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。



class Solution {
    public boolean canJump(int[] nums) {
        // boolean[] dp = new boolean[nums.length];
        // dp[0] = true;

        // for(int i = 1; i<nums.length; i++){
        //     boolean r = false;
        //     for(int j = i-1; j>=0; j--){
        //         if(dp[j] == true && (i - j)<=nums[j]){
        //             r = true;
        //             break;
        //         }
        //     }
        //     dp[i] = r;
        // }

        // return dp[nums.length-1];
//贪心 选离自己最近的可达点作为跳板，以该最近可达点做新的标准
//动态规划计算了每个点的可达信息，而从后向前，只计算了最后一个点可达信息’
        int last = nums.length - 1;
        for(int i = nums.length - 2; i>=0; i--){
            if(nums[i] >= (last - i))
                last = i;
        }
        if(last == 0)
            return true;
        return false;
    }
}
